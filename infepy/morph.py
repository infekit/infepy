# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/1_morphing.ipynb.

# %% auto 0
__all__ = ['morphing', 'main']

# %% ../nbs/1_morphing.ipynb 3
import os
import numpy as np

# %% ../nbs/1_morphing.ipynb 4
from .rbf import RBF

# %% ../nbs/1_morphing.ipynb 5
from infepy.preprocessing import (
    read_landmarks,
    read_nodes,
    _check_landmarks,
    write_output,
)
from infepy.utils import (
    read_toml,
    multiple_targets,
    _merge_path,
    to_ls_dyna,
    read_csv_file,
    from_df_to_np,
)

# %% ../nbs/1_morphing.ipynb 6
def morphing(
    source_mesh: np.ndarray,  # Coordinates of the mesh/ mesh
    source_landmarks: np.ndarray,  # Landmarks of the source mesh
    target_landmarks: np.ndarray,  # Target Landmarks
):
    "Morph the target mesh with RBF function - Thin Plate Spine."
    rbf = RBF(
        original_control_points=from_df_to_np(source_landmarks),
        deformed_control_points=from_df_to_np(target_landmarks),
        func="thin_plate_spline",
        radius=1.0,
    )
    return rbf(from_df_to_np(source_mesh))

# %% ../nbs/1_morphing.ipynb 7
def main():
    config = read_toml()
    source_landmarks = read_landmarks(
        _merge_path(config["source"]["path"], config["source"]["filename_landmarks"])
    )
    template_mesh = read_nodes(
        _merge_path(config["source"]["path"], config["source"]["filename_mesh"])
    )

    if multiple_targets() == bool:  # single target
        target_landmarks = read_landmarks(
            _merge_path(
                config["target"]["path"], config["target"]["filename_landmarks"]
            )
        )
        _check_landmarks(source_landmarks, target_landmarks)
        # morphed_mesh = morphing(source_landmarks, target_landmarks, template_mesh)
        # write_output(morphed_mesh)
    else:
        targets_folder = multiple_targets()
        for folder in targets_folder:
            new_path = os.path.join(
                config["target"]["path"], folder, config["target"]["filename_landmarks"]
            )
            target_landmarks = read_landmarks(new_path)
            _check_landmarks(source_landmarks, target_landmarks)
            # morphed_mesh = morphing(source_landmarks, target_landmarks, template_mesh)
            # write_output(morphed_mesh)
    return


main()

# %% ../nbs/1_morphing.ipynb 8
# @click.command()
# def hello():
#     click.echo("hello")
